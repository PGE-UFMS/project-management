name: Auto Create Tasks for User Stories in Sprint Backlog

on:
  project_card:
    types: [moved]

permissions:
  issues: write
  projects: read

jobs:
  create-tasks:
    runs-on: ubuntu-latest
    steps:
      - name: Verificar se a US estÃ¡ no Sprint Backlog e com Status "Backlog"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.payload.project_card.content_url.split('/').pop();
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            // Defina o nome correto do projeto "Sprint Backlog"
            const sprintBacklogProject = "Sprint Backlog";

            // Buscar todos os projetos associados ao Issue
            const { data: projects } = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const isInSprintBacklog = projects.some(project => project.name === sprintBacklogProject);
            if (!isInSprintBacklog) {
              console.log("A User Story nÃ£o estÃ¡ no Sprint Backlog. Ignorando.");
              return;
            }

            // Verifica se o Status Ã© "Backlog"
            const statusField = "Status";  // Nome do campo de status no GitHub Projects
            const { data: projectFields } = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const status = issue.labels.map(label => label.name).find(name => name.includes(statusField));
            if (status !== "Backlog") {
              console.log("A User Story nÃ£o estÃ¡ no Status 'Backlog'. Ignorando.");
              return;
            }

            console.log("A User Story estÃ¡ no Sprint Backlog e no Status 'Backlog'. Criando Tasks...");

            // Lista de tasks automÃ¡ticas categorizadas
            const tasks = [
              { title: "Definir requisitos detalhados", category: "Requisitos" },
              { title: "Implementar", category: "Desenvolvimento" },
              { title: "Testar funcionalidade", category: "Teste manual" },
              { title: "Testar funcionalidade", category: "Teste automatizado" }
            ];
            
            const createdTasks = [];
            for (const task of tasks) {
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[Task - ${task.category}] ${task.title}`,
                body: `ðŸ”— Relacionado Ã  [${issue.title}](${issue.html_url})\n\nCategoria: **${task.category}**`,
                labels: ["task", task.category],
                assignees: []
              });
              createdTasks.push(`- [ ] [#${newIssue.data.number} ${task.title} (${task.category})](${newIssue.data.html_url})`);
            }

            // Atualiza a User Story com a lista das Tasks criadas
            const updatedBody = `${issue.body}\n\n## ðŸ“Œ Tasks Criadas Automaticamente\n${createdTasks.join("\n")}\n\n## ðŸ“Œ Tasks Adicionadas Manualmente\n(Adicione novas tasks manualmente e marque aqui)`;
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: updatedBody
            });
