name: Debug - List Project Fields

on:
  workflow_dispatch: # acionado manualmente

jobs:
  list-fields:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read

    steps:
      - name: Run GraphQL to list project fields
        uses: actions/github-script@v7
        # Removido o par√¢metro github-token personalizado para usar o token padr√£o
        with:
          script: |
            const projectNumber = 2;
            const org = "PGE-UFMS";
            const repoName = "project-management";

            // 1. Listar campos do projeto via GraphQL
            const query = `
              query($org: String!, $number: Int!) {
                organization(login: $org) {
                  projectV2(number: $number) {
                    fields(first: 100) {
                      nodes {
                        __typename
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const result = await github.graphql(query, {
              org,
              number: projectNumber
            });

            console.log("üß© Campos personalizados do projeto:");
            result.organization.projectV2.fields.nodes.forEach(f => {
              console.log(`- [${f.__typename}] ${f.name} ‚Üí ID: ${f.id}`);
              if (f.options) {
                f.options.forEach(o => {
                  console.log(`  - Option: ${o.name} ‚Üí ID: ${o.id}`);
                });
              }
            });

            // 2. Listar campos nativos de issues via REST API
            console.log("\nüîç Campos nativos de issues:");
            
            try {
              // Obter uma issue existente para verificar os campos dispon√≠veis
              const issues = await github.rest.issues.listForRepo({
                owner: org,
                repo: repoName,
                per_page: 1
              });
              
              if (issues.data.length > 0) {
                const issue = issues.data[0];
                console.log(`Exemplo de issue #${issue.number}:`);
                
                // Listar propriedades nativas da issue
                console.log("Campos nativos dispon√≠veis:");
                const nativeFields = [
                  "title", "body", "assignees", "labels", "milestone", 
                  "state", "locked", "comments", "created_at", "updated_at"
                ];
                
                nativeFields.forEach(field => {
                  console.log(`- ${field}: ${issue[field] !== undefined ? "dispon√≠vel" : "n√£o dispon√≠vel"}`);
                });
                
                // Verificar se h√° campo Type nas labels
                if (issue.labels && issue.labels.length > 0) {
                  console.log("\nLabels da issue (poss√≠vel fonte do campo Type):");
                  issue.labels.forEach(label => {
                    console.log(`- ${label.name}`);
                  });
                }
                
                // Verificar se h√° campos adicionais via API
                console.log("\nVerificando campos adicionais via API...");
                
                // Tentar obter informa√ß√µes sobre o campo Type
                try {
                  const repoLabels = await github.rest.issues.listLabelsForRepo({
                    owner: org,
                    repo: repoName
                  });
                  
                  console.log("\nLabels dispon√≠veis no reposit√≥rio:");
                  const typeLabels = repoLabels.data.filter(label => 
                    label.name.startsWith("Type:") || 
                    label.name === "Bug" || 
                    label.name === "Epic" || 
                    label.name === "Feature" || 
                    label.name === "Task"
                  );
                  
                  if (typeLabels.length > 0) {
                    console.log("Labels relacionadas a Type encontradas:");
                    typeLabels.forEach(label => {
                      console.log(`- ${label.name} ‚Üí ID: ${label.id}`);
                    });
                  } else {
                    console.log("Nenhuma label relacionada a Type encontrada.");
                  }
                } catch (error) {
                  console.log("Erro ao buscar labels:", error.message);
                }
              } else {
                console.log("Nenhuma issue encontrada para an√°lise.");
              }
            } catch (error) {
              console.log("Erro ao buscar issues:", error.message);
            }
            
            // 3. Verificar se h√° API espec√≠fica para o campo Type
            console.log("\nüîé Verificando APIs espec√≠ficas para o campo Type:");
            try {
              // Verificar se h√° endpoint espec√≠fico para o campo Type
              const repoDetails = await github.rest.repos.get({
                owner: org,
                repo: repoName
              });
              
              console.log("Detalhes do reposit√≥rio:");
              console.log(`- Nome: ${repoDetails.data.name}`);
              console.log(`- Tem issues: ${repoDetails.data.has_issues}`);
              console.log(`- Tem projetos: ${repoDetails.data.has_projects}`);
              
              // Verificar configura√ß√µes adicionais do reposit√≥rio que possam conter o campo Type
              console.log("\nVerificando configura√ß√µes adicionais do reposit√≥rio...");
              
            } catch (error) {
              console.log("Erro ao buscar detalhes do reposit√≥rio:", error.message);
            }
